stages:
  - fetch-version
  - build
  - test
  - release
  - deploy
  - k8s

variables:
  PACKAGENAME: frontend-s3
  BE_BASE_IMAGE: "${CI_REGISTRY_IMAGE}/backend"
  BE_TEST_IMAGE: "${BE_BASE_IMAGE}:${CI_COMMIT_REF_SLUG}"
  FE_BASE_IMAGE: "${CI_REGISTRY_IMAGE}/frontend"
  FE_TEST_IMAGE: "${FE_BASE_IMAGE}:${CI_COMMIT_REF_SLUG}"
  DEV_LATEST_IMAGE_TAG: "latest-dev"
  PROD_LATEST_IMAGE_TAG: "latest"
  IS_PROD_VERSION: '^(v(([0-9]+)\.)?([0-9]+)\.?([0-9]+)|main)$'
  IS_DEV_VERSION: '^(v(([0-9]+)\.)?([0-9]+)\.?([0-9]+)?(-dev)\.?([0-9]+)|dev)$'

fetch-next-version:
  stage: fetch-version
  image: node:19
  script:
    - npm install @semantic-release/gitlab @semantic-release/exec @semantic-release/git
    - npx semantic-release --generate-notes false --dry-run
  artifacts:
    paths:
      - version.txt
  only:
    refs:
      - main
      - dev
      - /^(([0-9]+)\.)?([0-9]+)\.x/ # Maintenance branches
      - /^([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?(?:\+[0-9A-Za-z-]+)?$/ # Prerelease branches

generate-dummy-version:
  stage: fetch-version
  script:
    - echo build-${CI_PIPELINE_ID} > version.txt
  artifacts:
    paths:
      - version.txt
  except:
    refs:
      - main
      - dev
      - /^(([0-9]+)\.)?([0-9]+)\.x/ # Maintenance branches
      - /^([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?(?:\+[0-9A-Za-z-]+)?$/ # Prerelease branches

build-backend:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
    - VERSION="$(cat version.txt)"
  script:
    - docker build --pull -t "${BE_TEST_IMAGE}" backend
    - docker push "${BE_TEST_IMAGE}"

build-frontend:
  stage: build
  image: node:19-slim
  before_script:
    - apt update && apt install -y jq
    - VERSION="$(cat version.txt)"
    - PACKAGENAME="$(jq -r '.name' frontend/package.json)"
    - echo "$(jq '.version="'"${VERSION}"'"' frontend/package.json)" > frontend/package.json
    - echo ${PACKAGENAME} > packagename.txt
    - cd frontend
  script:
    - npm ci
    - npm run build
    - npm run compress
  artifacts:
    paths:
      - packagename.txt
      - frontend/*.tar.gz # Known issue w/ variable expansion https://gitlab.com/gitlab-org/gitlab-runner/-/issues/29141

release:
  image: node:19
  stage: release
  script:
    - npm install @semantic-release/gitlab @semantic-release/exec @semantic-release/git
    - npx semantic-release
  only:
    refs:
      - main
      - dev
      - /^(([0-9]+)\.)?([0-9]+)\.x/ # Maintenance branches
      - /^([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?(?:\+[0-9A-Za-z-]+)?$/ # Prerelease branch

test:
  stage: test
  script: echo "Hello, Test!"

deploy-frontend-package:
  stage: deploy
  before_script:
    - PACKAGENAME="$(cat packagename.txt)"
    - VERSION="$(cat version.txt)"
    - PACKAGE_FULLNAME="${PACKAGENAME}_v${VERSION}.tar.gz"
  script:
    - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file "frontend/${PACKAGE_FULLNAME}"
      "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${PACKAGENAME}/$VERSION/${PACKAGE_FULLNAME}"'
  only:
    refs:
      - main
      - dev
      - /^(([0-9]+)\.)?([0-9]+)\.x/ # Maintenance branches
      - /^([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?(?:\+[0-9A-Za-z-]+)?$/ # Prerelease branches

deploy-frontend-docker:
  stage: deploy
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - PACKAGENAME="$(cat packagename.txt)"
    - VERSION="$(cat version.txt)"
    - PACKAGE_FULLNAME="${PACKAGENAME}_v${VERSION}.tar.gz"
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
  script:
    - tar -xvf frontend/${PACKAGE_FULLNAME} -C frontend
    - docker build --pull -t "${FE_TEST_IMAGE}" frontend -f frontend/Dockerfile.prod
    - docker tag "${FE_TEST_IMAGE}" "${FE_BASE_IMAGE}:v${VERSION}"
    - docker push "${FE_BASE_IMAGE}:v${VERSION}"
    - |
      if [[ "${CI_COMMIT_REF_NAME}" =~ "${IS_PROD_VERSION}" ]]; then
        docker tag "${FE_TEST_IMAGE}" "${FE_BASE_IMAGE}:${PROD_LATEST_IMAGE_TAG}"
        docker push "${FE_BASE_IMAGE}:${PROD_LATEST_IMAGE_TAG}"
      fi
    - |
      if [[ "${CI_COMMIT_REF_NAME}" =~ "${IS_DEV_VERSION}" ]]; then
        docker tag "${FE_TEST_IMAGE}" "${FE_BASE_IMAGE}:${DEV_LATEST_IMAGE_TAG}"
        docker push "${FE_BASE_IMAGE}:${DEV_LATEST_IMAGE_TAG}"
      fi
  only:
    refs:
      - main
      - dev
      - /^(([0-9]+)\.)?([0-9]+)\.x/ # Maintenance branches
      - /^([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?(?:\+[0-9A-Za-z-]+)?$/ # Prerelease branches

deploy-backend-docker:
  stage: deploy
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - VERSION="$(cat version.txt)"
    - docker login -u gitlab-ci-token -p "${CI_JOB_TOKEN}" "${CI_REGISTRY}"
  script:
    - docker pull "${BE_TEST_IMAGE}"
    - docker tag "${BE_TEST_IMAGE}" "${BE_BASE_IMAGE}:v${VERSION}"
    - docker push "${BE_BASE_IMAGE}:v${VERSION}"
    - |
      if [[ "${CI_COMMIT_REF_NAME}" =~ "${IS_PROD_VERSION}" ]]; then
        docker tag "${BE_TEST_IMAGE}" "${BE_BASE_IMAGE}:${PROD_LATEST_IMAGE_TAG}"
        docker push "${BE_BASE_IMAGE}:${PROD_LATEST_IMAGE_TAG}"
      fi
    - |
      if [[ "${CI_COMMIT_REF_NAME}" =~ "${IS_DEV_VERSION}" ]]; then
        docker tag "${BE_TEST_IMAGE}" "${BE_BASE_IMAGE}:${DEV_LATEST_IMAGE_TAG}"
        docker push "${BE_BASE_IMAGE}:${DEV_LATEST_IMAGE_TAG}"
      fi
  only:
    refs:
      - main
      - dev
      - /^(([0-9]+)\.)?([0-9]+)\.x/ # Maintenance branches
      - /^([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?(?:\+[0-9A-Za-z-]+)?$/ # Prerelease branches

restart-deployment:
  stage: k8s
  image: ubuntu:latest
  before_script:
    - apt update && apt install curl -y
    - curl --silent "https://gitlab.com/gitlab-org/incubation-engineering/mobile-devops/download-secure-files/-/raw/main/installer" | bash
    - curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
    - chmod +x kubectl
    - mv ./kubectl /usr/bin/
    - ls -lah .secure_files
  script:
    - kubectl rollout restart deployment -n rgw-gui rgw-s3 \
      --insecure-skip-tls-verify --kubeconfig .secure_files/kubeconfig.yaml
