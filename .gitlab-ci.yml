stages:
  - prerelease
  - build
  - docker
  - release

next-version:
  stage: prerelease
  image: node:20
  script:
    - npm install @semantic-release/gitlab @semantic-release/exec @semantic-release/git
    - npx semantic-release
  artifacts:
    paths:
      - version.txt
  except:
    - tags

build:
  stage: docker
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - apk add npm
    - if [ ! -f version.txt ]; then echo $(git describe --dirty --tags) > version.txt; fi
    - npm version --git-tag-version false $(cat version.txt)
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
  script:
    - docker build . --pull -t "${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_SLUG}"
    - docker push "${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_SLUG}"
  except:
    - tags

release:
  stage: release
  image: node:20
  script:
    - npx semantic-release
  only:
    refs:
      - main
      - dev
      - /^(([0-9]+)\.)?([0-9]+)\.x/ # Maintenance branches

tag-latest:
  stage: release
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
  script: |
    docker pull "${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_NAME}"
    docker tag "${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_NAME}" "${CI_REGISTRY_IMAGE}:latest"
    docker push "${CI_REGISTRY_IMAGE}:latest"
  only:
    refs:
      - main

tag-latest-dev:
  stage: release
  image: docker:latest
  # tags: ["fast"]
  services:
    - docker:dind
  before_script:
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
  script: |
    docker pull "${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_NAME}"
    docker tag "${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_NAME}" "${CI_REGISTRY_IMAGE}:latest-dev"
    docker push "${CI_REGISTRY_IMAGE}:latest-dev"
  only:
    refs:
      - dev
